/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2022 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
config {
    info {
        description = 'OpenTelemetry extension for JReleaser'
        inceptionYear = '2022'
        tags = ['release']

        links {
            website      = "https://github.com/jreleaser/${project.rootProject.name}"
            issueTracker = "https://github.com/jreleaser/${project.rootProject.name}/issues"
            scm          = "https://github.com/jreleaser/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/jreleaser/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/jreleaser/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:jreleaser/${project.rootProject.name}.git"
        }

        specification {
            enabled = true
        }

        implementation {
            enabled = true
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
    }

    licensing {
        mappings += [
            gdsl: 'SLASHSTAR_STYLE',
            dsld: 'SLASHSTAR_STYLE'
        ]
    }

    quality {
        checkstyle {
            toolVersion = checkstyleVersion
            aggregate {
                enabled = false
            }
        }
    }
}

repositories {
    gradlePluginPortal()
    mavenLocal()
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.withType(JavaCompiler) {
    options.compilerArgs += ['-Duser.language=en', '-Duser.country=US']
}

license {
    exclude('build/**')
}

dependencies {
    compileOnly "org.jreleaser:jreleaser-model-api:$jreleaserVersion"
    compileOnly "org.jreleaser:jreleaser-logger-api:$jreleaserVersion"
    compileOnly "org.jreleaser:jreleaser-utils:$jreleaserVersion"
    
    api "io.opentelemetry:opentelemetry-api:${opentelemetryVersion}"
    api "io.opentelemetry:opentelemetry-sdk:${opentelemetryVersion}"
    api "io.opentelemetry:opentelemetry-sdk-trace:${opentelemetryVersion}"
    api "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:${opentelemetryVersion}"
    api "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${opentelemetryVersion}-alpha"
    api "io.opentelemetry:opentelemetry-semconv:${opentelemetryVersion}-alpha"
    api "io.opentelemetry:opentelemetry-exporter-otlp:${opentelemetryVersion}"
    api "io.grpc:grpc-netty-shaded:$nettyVersion"

    compileOnly "org.kordamp.jipsy:jipsy-annotations:$jipsyVersion"
    annotationProcessor "org.kordamp.jipsy:jipsy-processor:$jipsyVersion"
    
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
}

test {
    useJUnitPlatform()
}
